#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö ML-—Å–µ—Ä–≤–∏—Å–æ–≤
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (macOS/Ubuntu) –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
# –ó–∞–ø—É—Å–∫–∞–µ—Ç embedding –∏ reranker —Å–µ—Ä–≤–∏—Å—ã –ù–ê –•–û–°–¢–ï (–Ω–µ –≤ Docker)

set -e

echo "üöÄ Starting Universal ML Services for Knowledge Base RAG MVP"
echo "============================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if command -v uname >/dev/null 2>&1; then
    PLATFORM=$(uname -s)
    ARCHITECTURE=$(uname -m)
else
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if [ -f /etc/os-release ]; then
        PLATFORM="Linux"
        ARCHITECTURE="x86_64"
    else
        PLATFORM="Unknown"
        ARCHITECTURE="Unknown"
    fi
fi

echo -e "${BLUE}üñ•Ô∏è  Platform: $PLATFORM $ARCHITECTURE${NC}"

if [[ "$PLATFORM" == "Darwin" && "$ARCHITECTURE" == "arm64" ]]; then
    echo -e "${GREEN}üçé Detected Apple Silicon - optimizing for MPS${NC}"
    IS_APPLE_SILICON=true
elif [[ "$PLATFORM" == "Linux" ]] || [[ "$PLATFORM" == "Unknown" ]]; then
    echo -e "${GREEN}üêß Detected Linux - optimizing for CUDA/CPU${NC}"
    IS_UBUNTU=true
else
    echo -e "${YELLOW}‚ö†Ô∏è  Unknown platform - using default settings${NC}"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2
    
    if command -v lsof >/dev/null 2>&1; then
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  Port $port is already in use (possibly $service_name is already running)${NC}"
            return 1
        else
            echo -e "${GREEN}‚úÖ Port $port is available${NC}"
            return 0
        fi
    elif command -v netstat >/dev/null 2>&1; then
        if netstat -tuln | grep ":$port " >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  Port $port is already in use (possibly $service_name is already running)${NC}"
            return 1
        else
            echo -e "${GREEN}‚úÖ Port $port is available${NC}"
            return 0
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Cannot check port $port (lsof/netstat not available)${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_python_env() {
    local env_path=$1
    local service_name=$2
    
    if [ ! -d "$env_path" ]; then
        echo -e "${RED}‚ùå Virtual environment not found: $env_path${NC}"
        echo -e "${BLUE}üí° Create it with: python3 -m venv $env_path${NC}"
        return 1
    fi
    
    if [ ! -f "$env_path/bin/activate" ]; then
        echo -e "${RED}‚ùå Invalid virtual environment: $env_path${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Virtual environment found for $service_name${NC}"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
echo -e "${BLUE}üîç Checking system requirements...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 is not installed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Python 3 is available: $(python3 --version)${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "${BLUE}üîç Checking ports availability...${NC}"

EMBEDDING_PORT=8003
RERANKER_PORT=8002

set +e  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º set -e
check_port $EMBEDDING_PORT "Embedding Service"
EMBEDDING_PORT_AVAILABLE=$?

check_port $RERANKER_PORT "Reranker Service"
RERANKER_PORT_AVAILABLE=$?
set -e  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ set -e

# –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –∑–∞–ø—É—Å–∫ ML —Å–µ—Ä–≤–∏—Å–æ–≤
if [ $EMBEDDING_PORT_AVAILABLE -ne 0 ] || [ $RERANKER_PORT_AVAILABLE -ne 0 ]; then
    echo -e "${GREEN}‚úÖ ML services are already running, skipping startup${NC}"
    echo -e "${BLUE}üéØ ML Services Status:${NC}"
    if [ $EMBEDDING_PORT_AVAILABLE -ne 0 ]; then
        echo -e "${GREEN}‚úÖ Embedding Service: Already running on port $EMBEDDING_PORT${NC}"
    fi
    if [ $RERANKER_PORT_AVAILABLE -ne 0 ]; then
        echo -e "${GREEN}‚úÖ Reranker Service: Already running on port $RERANKER_PORT${NC}"
    fi
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${GREEN}üéâ ML Services check completed - services are ready!${NC}"
    echo -e "${BLUE}============================================================${NC}"
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
echo -e "${BLUE}üîç Checking virtual environments...${NC}"

EMBEDDING_VENV="venv_embedding"
RERANKER_VENV="venv_reranker"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è embedding —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d "$EMBEDDING_VENV" ]; then
    echo -e "${YELLOW}üì¶ Creating virtual environment for embedding service...${NC}"
    python3 -m venv $EMBEDDING_VENV
    
    echo -e "${YELLOW}üì¶ Installing embedding service dependencies...${NC}"
    source $EMBEDDING_VENV/bin/activate
    pip install --upgrade pip
    pip install -r requirements_local_embedding.txt
    deactivate
    echo -e "${GREEN}‚úÖ Embedding service environment ready${NC}"
else
    check_python_env $EMBEDDING_VENV "Embedding Service"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è reranker —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d "$RERANKER_VENV" ]; then
    echo -e "${YELLOW}üì¶ Creating virtual environment for reranker service...${NC}"
    python3 -m venv $RERANKER_VENV
    
    echo -e "${YELLOW}üì¶ Installing reranker service dependencies...${NC}"
    source $RERANKER_VENV/bin/activate
    pip install --upgrade pip
    pip install -r requirements_local_reranker.txt
    deactivate
    echo -e "${GREEN}‚úÖ Reranker service environment ready${NC}"
    RERANKER_ENV_OK=0
else
    check_python_env $RERANKER_VENV "Reranker Service"
    RERANKER_ENV_OK=$?
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${BLUE}üöÄ Starting ML services...${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ–Ω–µ
start_service() {
    local service_name=$1
    local venv_path=$2
    local script_path=$3
    local port=$4
    local log_file=$5
    
    echo -e "${YELLOW}üîÑ Starting $service_name on port $port...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p logs
    
    # –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    local full_log_path="logs/$log_file"
    local pid_file="logs/$(echo $service_name | tr '[:upper:]' '[:lower:]')_service.pid"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    (
        source $venv_path/bin/activate
        python $script_path > "$full_log_path" 2>&1 &
        echo $! > "$pid_file"
    )
    
    # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    echo -e "${BLUE}‚è≥ Waiting for $service_name to initialize (loading model...)${NC}"
    local max_attempts=60  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
        local pid=$(cat "$pid_file" 2>/dev/null || echo "")
        if [ -n "$pid" ] && ! kill -0 "$pid" 2>/dev/null; then
            echo -e "${RED}‚ùå $service_name process died during startup${NC}"
            echo -e "${BLUE}üìã Check logs: $log_file${NC}"
            return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1 || netstat -tuln | grep ":$port " >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $service_name started successfully on port $port${NC}"
            echo -e "${BLUE}üìã Logs: $log_file${NC}"
            return 0
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if [ $((attempt % 10)) -eq 0 ]; then
            echo -e "${YELLOW}‚è≥ Still loading model... ($attempt/${max_attempts})${NC}"
        else
            echo -n "."
        fi
        
        sleep 5
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚ùå $service_name failed to start within $((max_attempts * 5)) seconds${NC}"
    echo -e "${BLUE}üìã Check logs: $log_file${NC}"
    return 1
}

# –ó–∞–ø—É—Å–∫ Embedding Service
if [ $EMBEDDING_PORT_AVAILABLE -eq 0 ]; then
    start_service "Embedding" $EMBEDDING_VENV "local_embedding_server.py" $EMBEDDING_PORT "embedding_service.log"
    EMBEDDING_STARTED=$?
else
    echo -e "${YELLOW}‚è≠Ô∏è  Skipping Embedding Service (port in use)${NC}"
    EMBEDDING_STARTED=0
fi

# –ó–∞–ø—É—Å–∫ Reranker Service
if [ $RERANKER_PORT_AVAILABLE -eq 0 ] && [ $RERANKER_ENV_OK -eq 0 ]; then
    start_service "Reranker" $RERANKER_VENV "local_reranker_server.py" $RERANKER_PORT "reranker_service.log"
    RERANKER_STARTED=$?
else
    echo -e "${YELLOW}‚è≠Ô∏è  Skipping Reranker Service (port in use or env not ready)${NC}"
    RERANKER_STARTED=0
fi

# –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
echo -e "${BLUE}============================================================"
echo -e "üéØ ML Services Status ($PLATFORM $ARCHITECTURE):"
echo -e "============================================================${NC}"

if [ $EMBEDDING_STARTED -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Embedding Service: Running on http://0.0.0.0:$EMBEDDING_PORT${NC}"
    echo -e "   üìä Health check: curl http://127.0.0.1:$EMBEDDING_PORT/health"
    echo -e "   üìã Logs: tail -f logs/embedding_service.log"
else
    echo -e "${RED}‚ùå Embedding Service: Failed to start${NC}"
fi

if [ $RERANKER_STARTED -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Reranker Service: Running on http://0.0.0.0:$RERANKER_PORT${NC}"
    echo -e "   üìä Health check: curl http://127.0.0.1:$RERANKER_PORT/health"
    echo -e "   üìã Logs: tail -f logs/reranker_service.log"
else
    echo -e "${RED}‚ùå Reranker Service: Failed to start${NC}"
fi

echo -e "${BLUE}============================================================${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${BLUE}üîç Health checks...${NC}"

if [ $EMBEDDING_STARTED -eq 0 ]; then
    sleep 3
    if curl -s http://127.0.0.1:$EMBEDDING_PORT/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Embedding Service health check passed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Embedding Service health check failed (may still be starting)${NC}"
    fi
fi

if [ $RERANKER_STARTED -eq 0 ]; then
    sleep 3
    if curl -s http://127.0.0.1:$RERANKER_PORT/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Reranker Service health check passed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Reranker Service health check failed (may still be starting)${NC}"
    fi
fi

echo -e "${BLUE}============================================================"
echo -e "${GREEN}üéâ Universal ML Services startup completed on $PLATFORM!${NC}"
echo -e "${BLUE}üí° Your gpt-oss-20b model should be running on port 8000${NC}"
echo -e "${BLUE}üí° Now you can start Docker services with:${NC}"
if [ "$IS_UBUNTU" = true ]; then
    echo -e "${BLUE}   cd deployment && docker-compose -f docker-compose.prod.yml up -d${NC}"
else
    echo -e "${BLUE}   docker-compose up -d${NC}"
fi
echo -e "${BLUE}üõë To stop ML services, run: ./stop_ml_services.sh${NC}"
echo -e "${BLUE}============================================================${NC}"
