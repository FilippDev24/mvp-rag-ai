#!/bin/bash

# üõë –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê RAG –°–ï–†–í–ò–°–ê
# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã (Docker + ML —Å–µ—Ä–≤–∏—Å—ã)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII Art –∑–∞–≥–æ–ª–æ–≤–æ–∫
echo -e "${RED}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üõë RAG KNOWLEDGE BASE                     ‚ïë
‚ïë                   Universal Stop Script                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üîÑ Graceful shutdown of all services                       ‚ïë
‚ïë  üê≥ Docker containers cleanup                               ‚ïë
‚ïë  ü§ñ ML services termination                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
FORCE_KILL=false
CLEAN_VOLUMES=false
CLEAN_IMAGES=false
VERBOSE=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --force|-f)
            FORCE_KILL=true
            shift
            ;;
        --clean-volumes)
            CLEAN_VOLUMES=true
            shift
            ;;
        --clean-images)
            CLEAN_IMAGES=true
            shift
            ;;
        --clean-all)
            CLEAN_VOLUMES=true
            CLEAN_IMAGES=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --help|-h)
            echo -e "${BLUE}Usage: $0 [OPTIONS]${NC}"
            echo ""
            echo -e "${YELLOW}Options:${NC}"
            echo "  --force, -f             Force kill all processes"
            echo "  --clean-volumes         Remove Docker volumes (data will be lost!)"
            echo "  --clean-images          Remove Docker images"
            echo "  --clean-all             Remove volumes and images"
            echo "  --verbose, -v           Verbose output"
            echo "  --help, -h              Show this help message"
            echo ""
            echo -e "${YELLOW}Examples:${NC}"
            echo "  $0                      # Graceful shutdown"
            echo "  $0 --force              # Force kill all processes"
            echo "  $0 --clean-all          # Clean shutdown with data cleanup"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üõë Stopping RAG Knowledge Base...${NC}"
echo -e "${BLUE}üìÖ Started at: $(date)${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID —Ñ–∞–π–ª—É
stop_service_by_pid() {
    local service_name=$1
    local pid_file=$2
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
            log_step "Stopping $service_name (PID: $pid)..."
            
            if [ $FORCE_KILL = true ]; then
                kill -9 "$pid" 2>/dev/null || true
            else
                kill -TERM "$pid" 2>/dev/null || true
                # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è graceful shutdown
                sleep 5
                if kill -0 "$pid" 2>/dev/null; then
                    log_warning "$service_name didn't stop gracefully, force killing..."
                    kill -9 "$pid" 2>/dev/null || true
                fi
            fi
            
            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            rm -f "$pid_file"
            log_success "$service_name stopped"
        else
            log_info "$service_name was not running"
            rm -f "$pid_file"
        fi
    else
        log_info "$service_name PID file not found"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –ø–æ—Ä—Ç—É
stop_service_by_port() {
    local service_name=$1
    local port=$2
    
    if command -v lsof >/dev/null 2>&1; then
        local pid=$(lsof -ti:$port 2>/dev/null || true)
        if [ -n "$pid" ]; then
            log_step "Stopping $service_name on port $port (PID: $pid)..."
            
            if [ $FORCE_KILL = true ]; then
                kill -9 $pid 2>/dev/null || true
            else
                kill -TERM $pid 2>/dev/null || true
                sleep 3
                if kill -0 $pid 2>/dev/null; then
                    kill -9 $pid 2>/dev/null || true
                fi
            fi
            
            log_success "$service_name stopped"
        else
            log_info "$service_name was not running on port $port"
        fi
    elif command -v netstat >/dev/null 2>&1; then
        if netstat -tuln | grep ":$port " >/dev/null 2>&1; then
            log_warning "Process found on port $port but cannot determine PID (lsof not available)"
        else
            log_info "$service_name was not running on port $port"
        fi
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML —Å–µ—Ä–≤–∏—Å–æ–≤
log_step "Stopping ML services..."

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ PID —Ñ–∞–π–ª–∞–º
if [ -d "logs" ]; then
    stop_service_by_pid "Embedding Service" "logs/embedding_service.pid"
    stop_service_by_pid "Reranker Service" "logs/reranker_service.pid"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ PID —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
stop_service_by_port "Embedding Service" 8003
stop_service_by_port "Reranker Service" 8002

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ vLLM/Ollama –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã
stop_service_by_port "vLLM/Ollama" 8000
stop_service_by_port "Ollama" 11434

log_success "ML services stopped"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
log_step "Stopping Docker services..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É docker-compose
DOCKER_COMPOSE_CMD="docker-compose"
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    log_warning "Neither 'docker-compose' nor 'docker compose' is available"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
if [ -f "docker-compose.yml" ]; then
    log_step "Stopping local Docker services..."
    if [ $VERBOSE = true ]; then
        $DOCKER_COMPOSE_CMD -f docker-compose.yml down --remove-orphans
    else
        $DOCKER_COMPOSE_CMD -f docker-compose.yml down --remove-orphans > /dev/null 2>&1
    fi
    log_success "Local Docker services stopped"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–æ–≤
if [ -f "deployment/docker-compose.prod.yml" ]; then
    log_step "Stopping production Docker services..."
    cd deployment
    if [ $VERBOSE = true ]; then
        $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml down --remove-orphans
    else
        $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml down --remove-orphans > /dev/null 2>&1
    fi
    cd ..
    log_success "Production Docker services stopped"
fi

# –û—á–∏—Å—Ç–∫–∞ volumes –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
if [ $CLEAN_VOLUMES = true ]; then
    log_step "Cleaning Docker volumes..."
    log_warning "This will delete all data! Continuing in 5 seconds..."
    sleep 5
    
    # –£–¥–∞–ª—è–µ–º volumes –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "docker-compose.yml" ]; then
        if [ $VERBOSE = true ]; then
            $DOCKER_COMPOSE_CMD -f docker-compose.yml down -v
        else
            $DOCKER_COMPOSE_CMD -f docker-compose.yml down -v > /dev/null 2>&1
        fi
    fi
    
    # –£–¥–∞–ª—è–µ–º volumes –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "deployment/docker-compose.prod.yml" ]; then
        cd deployment
        if [ $VERBOSE = true ]; then
            $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml down -v
        else
            $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml down -v > /dev/null 2>&1
        fi
        cd ..
    fi
    
    log_success "Docker volumes cleaned"
fi

# –û—á–∏—Å—Ç–∫–∞ images –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
if [ $CLEAN_IMAGES = true ]; then
    log_step "Cleaning Docker images..."
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
    docker images | grep -E "(kb_|knowledge)" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    docker image prune -f > /dev/null 2>&1 || true
    
    log_success "Docker images cleaned"
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log_step "Cleaning temporary files..."

# –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ ML —Å–µ—Ä–≤–∏—Å–æ–≤
if [ -d "logs" ]; then
    rm -f logs/*.log
    rm -f logs/*.pid
fi

# –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
rm -f .startup_info

# –û—á–∏—Å—Ç–∫–∞ Python cache
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -delete 2>/dev/null || true

log_success "Temporary files cleaned"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
log_step "Verifying all services are stopped..."

SERVICES_RUNNING=false

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
PORTS_TO_CHECK=(8000 8002 8003 8010 8011 8012 8014 8015 3000 3001 5432 6379 11434)

for port in "${PORTS_TO_CHECK[@]}"; do
    if command -v lsof >/dev/null 2>&1; then
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            log_warning "Port $port is still in use"
            SERVICES_RUNNING=true
        fi
    elif command -v netstat >/dev/null 2>&1; then
        if netstat -tuln | grep ":$port " >/dev/null 2>&1; then
            log_warning "Port $port is still in use"
            SERVICES_RUNNING=true
        fi
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
RUNNING_CONTAINERS=$(docker ps -q --filter "name=kb_" 2>/dev/null || true)
if [ -n "$RUNNING_CONTAINERS" ]; then
    log_warning "Some Docker containers are still running:"
    docker ps --filter "name=kb_" --format "table {{.Names}}\t{{.Status}}" 2>/dev/null || true
    SERVICES_RUNNING=true
fi

if [ $SERVICES_RUNNING = false ]; then
    log_success "All services verified as stopped"
else
    log_warning "Some services may still be running"
    if [ $FORCE_KILL = false ]; then
        log_info "Use --force flag to force kill remaining processes"
    fi
fi

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
echo ""
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë                    üõë SHUTDOWN COMPLETE                     ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

log_success "RAG Knowledge Base has been stopped!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
echo -e "${BLUE}üìä Shutdown Summary:${NC}"
echo "   ‚Ä¢ ML Services:        Stopped"
echo "   ‚Ä¢ Docker Services:    Stopped"
if [ $CLEAN_VOLUMES = true ]; then
    echo "   ‚Ä¢ Data Volumes:       Cleaned"
fi
if [ $CLEAN_IMAGES = true ]; then
    echo "   ‚Ä¢ Docker Images:      Cleaned"
fi
echo "   ‚Ä¢ Temporary Files:    Cleaned"
echo ""

# –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
echo -e "${BLUE}üõ†Ô∏è  Next Steps:${NC}"
echo "   ‚Ä¢ Start again:        ./start.sh"
echo "   ‚Ä¢ Start production:   ./start.sh --prod"
echo "   ‚Ä¢ View Docker status: docker ps -a"
echo "   ‚Ä¢ Clean everything:   ./stop.sh --clean-all"
echo ""

echo -e "${GREEN}‚ú® System is now clean and ready for restart!${NC}"
echo ""
