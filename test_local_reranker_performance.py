#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Docker vs Native Apple Silicon
"""

import time
import requests
import json
from typing import List, Dict, Any

def test_local_reranker_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    base_url = "http://127.0.0.1:8002"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_query = "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞?"
    test_documents = [
        "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∫–∞–∑ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.",
        "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å HR-–æ—Ç–¥–µ–ª–æ–º –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º.",
        "–í –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –≤—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.",
        "–ü—Ä–∏–∫–∞–∑ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É.",
        "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–ª–∞–¥–µ—Ç—å –Ω–∞–≤—ã–∫–∞–º–∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º.",
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∫–∞—Å–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.",
        "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Å—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã, email-—Ä–∞—Å—Å—ã–ª–∫–∏, –ª–µ–Ω–¥–∏–Ω–≥–∏.",
        "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∫–∞–∑–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º."
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üìç URL: {base_url}")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(test_documents)}")
    print("=" * 80)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤: {health_data['device']} ({health_data['torch_version']})")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python local_reranker_server.py")
        return
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    print("\n2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏...")
    try:
        response = requests.get(f"{base_url}/model-info", timeout=5)
        if response.status_code == 200:
            model_info = response.json()
            print(f"üìã –ú–æ–¥–µ–ª—å: {model_info['model_name']}")
            print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model_info['device']}")
            print(f"‚ö° –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {model_info['expected_performance']}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    # 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    test_sizes = [5, 10, 20, 30]
    
    results = []
    
    for size in test_sizes:
        print(f"\nüìä –¢–µ—Å—Ç —Å {size} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_subset = test_documents[:size]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥–æ–Ω–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        times = []
        server_times = []
        
        for run in range(3):
            try:
                start_time = time.time()
                
                response = requests.post(
                    f"{base_url}/rerank",
                    json={
                        "query": test_query,
                        "documents": docs_subset,
                        "top_k": min(10, size)
                    },
                    timeout=30
                )
                
                total_time = time.time() - start_time
                
                if response.status_code == 200:
                    result_data = response.json()
                    server_processing_time = result_data.get("processing_time_ms", 0)
                    device_used = result_data.get("device_used", "unknown")
                    
                    times.append(total_time * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    server_times.append(server_processing_time)
                    
                    print(f"   –ü—Ä–æ–≥–æ–Ω {run + 1}: {total_time * 1000:.1f}ms (—Å–µ—Ä–≤–µ—Ä: {server_processing_time:.1f}ms, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_used})")
                else:
                    print(f"   ‚ùå –ü—Ä–æ–≥–æ–Ω {run + 1} –Ω–µ—É–¥–∞—á–µ–Ω: {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå –ü—Ä–æ–≥–æ–Ω {run + 1} –æ—à–∏–±–∫–∞: {str(e)}")
        
        if times:
            avg_total = sum(times) / len(times)
            avg_server = sum(server_times) / len(server_times)
            min_time = min(times)
            max_time = max(times)
            
            results.append({
                "documents": size,
                "avg_total_ms": avg_total,
                "avg_server_ms": avg_server,
                "min_ms": min_time,
                "max_ms": max_time,
                "time_per_doc_ms": avg_server / size
            })
            
            print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_total:.1f}ms (—Å–µ—Ä–≤–µ—Ä: {avg_server:.1f}ms)")
            print(f"   üìà –í—Ä–µ–º—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {avg_server / size:.1f}ms")
            print(f"   üìà –î–∏–∞–ø–∞–∑–æ–Ω: {min_time:.1f}ms - {max_time:.1f}ms")
    
    # 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 80)
    
    if results:
        print(f"{'–î–æ–∫—É–º–µ–Ω—Ç–æ–≤':<12} {'–°—Ä–µ–¥–Ω–µ–µ (ms)':<15} {'–°–µ—Ä–≤–µ—Ä (ms)':<15} {'–ù–∞ –¥–æ–∫—É–º–µ–Ω—Ç (ms)':<18} {'–û—Ü–µ–Ω–∫–∞'}")
        print("-" * 80)
        
        for result in results:
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if result["avg_server_ms"] < 300:
                rating = "üöÄ –û–¢–õ–ò–ß–ù–û"
            elif result["avg_server_ms"] < 1000:
                rating = "‚úÖ –•–û–†–û–®–û"
            elif result["avg_server_ms"] < 5000:
                rating = "‚ö†Ô∏è  –°–†–ï–î–ù–ï"
            else:
                rating = "‚ùå –ú–ï–î–õ–ï–ù–ù–û"
            
            print(f"{result['documents']:<12} {result['avg_total_ms']:<15.1f} {result['avg_server_ms']:<15.1f} {result['time_per_doc_ms']:<18.1f} {rating}")
        
        # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_result = min(results, key=lambda x: x["avg_server_ms"])
        print(f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_result['avg_server_ms']:.1f}ms –¥–ª—è {best_result['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏
        expected_max = 300  # 300ms –¥–ª—è Apple Silicon M4 Pro
        if best_result["avg_server_ms"] <= expected_max:
            improvement = 15000 / best_result["avg_server_ms"]  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å 15 —Å–µ–∫—É–Ω–¥–∞–º–∏ –≤ Docker
            print(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {improvement:.0f}x –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å Docker")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π ({expected_max}ms)")
    
    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_local_reranker_performance()
