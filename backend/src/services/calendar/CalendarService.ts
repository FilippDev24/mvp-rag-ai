import { EmployeeInfo, MeetingCreationResult, CALENDAR_CONSTANTS } from '../../types/calendar';
import { caldavCalendarService } from '../caldavCalendarService';
import { logger } from '../../utils/logger';

/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
 * –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ CalDAV
 */
export class CalendarService {

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
   */
  async createMeeting(
    title: string,
    startTime: Date,
    endTime: Date,
    participants: EmployeeInfo[],
    organizerEmail: string,
    description?: string,
    location?: string
  ): Promise<MeetingCreationResult> {
    try {
      logger.info('Creating meeting', {
        title,
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        participants: participants.map(p => p.email),
        organizer: organizerEmail
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ CalDAV
      const aiDescription = description 
        ? `${description}\n\nü§ñ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º`
        : 'ü§ñ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º';

      const event = await caldavCalendarService.createEvent({
        summary: title,
        description: aiDescription,
        location: location,
        start: {
          dateTime: startTime.toISOString(),
          timeZone: CALENDAR_CONSTANTS.DEFAULT_TIMEZONE
        },
        end: {
          dateTime: endTime.toISOString(),
          timeZone: CALENDAR_CONSTANTS.DEFAULT_TIMEZONE
        },
        attendees: [
          { email: organizerEmail }, // –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
          ...participants.map(p => ({ 
            email: p.email, 
            displayName: p.name 
          }))
        ]
      });

      logger.info('CalDAV event created successfully', {
        eventId: event.id,
        title: event.summary
      });

      const participantNames = participants.map(p => p.name).join(', ');
      const timeStr = startTime.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit'
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      let successMessage = '';
      if (event.id?.startsWith('fallback-')) {
        successMessage = `‚ö†Ô∏è –í—Å—Ç—Ä–µ—á–∞ "${title}" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${timeStr}. –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º), –Ω–æ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.`;
        if (participantNames) {
          successMessage += ` –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participantNames}`;
        }
      } else {
        successMessage = `‚úÖ –í—Å—Ç—Ä–µ—á–∞ "${title}" —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ ${timeStr}.`;
        if (participantNames) {
          successMessage += ` –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${participantNames}`;
        }
      }

      return {
        success: true,
        event,
        message: successMessage,
        participants: participants
      };

    } catch (error) {
      logger.error('Error creating meeting', { error, title });
      
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        participants: [],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}
