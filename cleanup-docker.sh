#!/bin/bash

# üßπ –ì–õ–£–ë–û–ö–ê–Ø –û–ß–ò–°–¢–ö–ê DOCKER –°–ò–°–¢–ï–ú–´
# –£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, volumes –∏ networks
# –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å "–º—É—Å–æ—Ä–Ω—ã–º–∏" –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII Art –∑–∞–≥–æ–ª–æ–≤–æ–∫
echo -e "${CYAN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üßπ DOCKER CLEANUP                        ‚ïë
‚ïë                 Deep System Cleaning                        ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üóëÔ∏è  Remove unused containers, images, volumes              ‚ïë
‚ïë  üíæ Free up disk space                                      ‚ïë
‚ïë  üîß Fix Docker system issues                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏
CLEAN_CONTAINERS=true
CLEAN_IMAGES=true
CLEAN_VOLUMES=false
CLEAN_NETWORKS=true
CLEAN_BUILD_CACHE=true
FORCE_CLEAN=false
AGGRESSIVE_CLEAN=false
DRY_RUN=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --containers-only)
            CLEAN_CONTAINERS=true
            CLEAN_IMAGES=false
            CLEAN_VOLUMES=false
            CLEAN_NETWORKS=false
            CLEAN_BUILD_CACHE=false
            shift
            ;;
        --images-only)
            CLEAN_CONTAINERS=false
            CLEAN_IMAGES=true
            CLEAN_VOLUMES=false
            CLEAN_NETWORKS=false
            CLEAN_BUILD_CACHE=false
            shift
            ;;
        --include-volumes)
            CLEAN_VOLUMES=true
            shift
            ;;
        --aggressive)
            AGGRESSIVE_CLEAN=true
            CLEAN_VOLUMES=true
            shift
            ;;
        --force|-f)
            FORCE_CLEAN=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --help|-h)
            echo -e "${BLUE}Usage: $0 [OPTIONS]${NC}"
            echo ""
            echo -e "${YELLOW}Options:${NC}"
            echo "  --containers-only       Clean only containers"
            echo "  --images-only           Clean only images"
            echo "  --include-volumes       Also clean volumes (DATA WILL BE LOST!)"
            echo "  --aggressive            Aggressive cleanup (includes volumes)"
            echo "  --force, -f             Skip confirmation prompts"
            echo "  --dry-run               Show what would be cleaned without doing it"
            echo "  --help, -h              Show this help message"
            echo ""
            echo -e "${YELLOW}Examples:${NC}"
            echo "  $0                      # Standard cleanup (safe)"
            echo "  $0 --aggressive         # Deep cleanup including volumes"
            echo "  $0 --dry-run            # Preview cleanup actions"
            echo "  $0 --containers-only    # Clean only containers"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üßπ Docker Cleanup Configuration:${NC}"
echo "  ‚Ä¢ Clean containers: $([[ $CLEAN_CONTAINERS == true ]] && echo "‚úÖ" || echo "‚ùå")"
echo "  ‚Ä¢ Clean images: $([[ $CLEAN_IMAGES == true ]] && echo "‚úÖ" || echo "‚ùå")"
echo "  ‚Ä¢ Clean volumes: $([[ $CLEAN_VOLUMES == true ]] && echo "‚ö†Ô∏è  YES (DATA LOSS!)" || echo "‚ùå")"
echo "  ‚Ä¢ Clean networks: $([[ $CLEAN_NETWORKS == true ]] && echo "‚úÖ" || echo "‚ùå")"
echo "  ‚Ä¢ Clean build cache: $([[ $CLEAN_BUILD_CACHE == true ]] && echo "‚úÖ" || echo "‚ùå")"
echo "  ‚Ä¢ Dry run: $([[ $DRY_RUN == true ]] && echo "‚úÖ" || echo "‚ùå")"
echo ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π dry-run
execute_command() {
    local cmd="$1"
    local description="$2"
    
    if [ $DRY_RUN = true ]; then
        echo -e "${YELLOW}[DRY RUN] Would execute: $cmd${NC}"
        return 0
    fi
    
    log_step "$description"
    if eval "$cmd" 2>/dev/null; then
        log_success "$description completed"
        return 0
    else
        log_warning "$description failed or nothing to clean"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–æ –∏ –ø–æ—Å–ª–µ
get_docker_size() {
    docker system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}" 2>/dev/null || echo "Unable to get Docker size info"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker is not installed or not in PATH"
    exit 1
fi

if ! docker info &> /dev/null; then
    log_error "Docker daemon is not running"
    exit 1
fi

log_success "Docker is available and running"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
echo ""
log_step "Current Docker system usage:"
get_docker_size
echo ""

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ volumes
if [ $CLEAN_VOLUMES = true ] && [ $FORCE_CLEAN = false ]; then
    log_warning "‚ö†Ô∏è  VOLUME CLEANUP ENABLED - THIS WILL DELETE ALL DATA!"
    log_warning "This includes databases, uploaded files, and other persistent data"
    echo ""
    read -p "Are you sure you want to continue? (type 'yes' to confirm): " confirm
    if [ "$confirm" != "yes" ]; then
        log_info "Cleanup cancelled by user"
        exit 0
    fi
fi

# –û–±—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
if [ $FORCE_CLEAN = false ] && [ $DRY_RUN = false ]; then
    echo ""
    log_warning "This will clean up Docker system components"
    read -p "Continue with cleanup? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Cleanup cancelled by user"
        exit 0
    fi
fi

echo ""
log_step "Starting Docker cleanup process..."

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
log_step "Stopping project containers..."
if [ $DRY_RUN = false ]; then
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    docker ps -q --filter "name=kb_" | xargs -r docker stop 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ docker-compose –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if [ -f "docker-compose.yml" ]; then
        docker-compose -f docker-compose.yml down --remove-orphans 2>/dev/null || true
    fi
    
    if [ -f "deployment/docker-compose.prod.yml" ]; then
        cd deployment 2>/dev/null && docker-compose -f docker-compose.prod.yml down --remove-orphans 2>/dev/null && cd .. || true
    fi
    
    if [ -f "deployment/docker-compose.vllm.yml" ]; then
        cd deployment 2>/dev/null && docker-compose -f docker-compose.vllm.yml down --remove-orphans 2>/dev/null && cd .. || true
    fi
fi

# 2. –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if [ $CLEAN_CONTAINERS = true ]; then
    echo ""
    log_step "Cleaning containers..."
    
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    execute_command "docker container prune -f" "Removing stopped containers"
    
    if [ $AGGRESSIVE_CLEAN = true ]; then
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        execute_command "docker ps -aq | xargs -r docker rm -f" "Force removing all containers"
    fi
fi

# 3. –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤
if [ $CLEAN_IMAGES = true ]; then
    echo ""
    log_step "Cleaning images..."
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
    execute_command "docker image prune -f" "Removing dangling images"
    
    if [ $AGGRESSIVE_CLEAN = true ]; then
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
        execute_command "docker image prune -a -f" "Removing all unused images"
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
        if [ $DRY_RUN = false ]; then
            docker images | grep -E "(kb_|knowledge|mvp-rag)" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
        fi
    fi
fi

# 4. –û—á–∏—Å—Ç–∫–∞ volumes
if [ $CLEAN_VOLUMES = true ]; then
    echo ""
    log_warning "Cleaning volumes (DATA WILL BE LOST!)..."
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
    execute_command "docker volume prune -f" "Removing unused volumes"
    
    if [ $AGGRESSIVE_CLEAN = true ]; then
        # –£–¥–∞–ª—è–µ–º volumes –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if [ $DRY_RUN = false ]; then
            docker volume ls -q | grep -E "(kb_|knowledge|postgres|redis|chromadb)" | xargs -r docker volume rm -f 2>/dev/null || true
        fi
    fi
fi

# 5. –û—á–∏—Å—Ç–∫–∞ networks
if [ $CLEAN_NETWORKS = true ]; then
    echo ""
    log_step "Cleaning networks..."
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
    execute_command "docker network prune -f" "Removing unused networks"
fi

# 6. –û—á–∏—Å—Ç–∫–∞ build cache
if [ $CLEAN_BUILD_CACHE = true ]; then
    echo ""
    log_step "Cleaning build cache..."
    
    # –û—á–∏—â–∞–µ–º build cache
    execute_command "docker builder prune -f" "Removing build cache"
    
    if [ $AGGRESSIVE_CLEAN = true ]; then
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ build cache
        execute_command "docker builder prune -a -f" "Removing all build cache"
    fi
fi

# 7. –û–±—â–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
echo ""
log_step "Final system cleanup..."
execute_command "docker system prune -f" "Final system cleanup"

if [ $AGGRESSIVE_CLEAN = true ]; then
    execute_command "docker system prune -a -f" "Aggressive system cleanup"
fi

# 8. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Docker (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
if [ $AGGRESSIVE_CLEAN = true ] && [ $DRY_RUN = false ]; then
    log_step "Cleaning Docker logs..."
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç sudo –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
    if [ -d "/var/lib/docker/containers" ]; then
        find /var/lib/docker/containers -name "*.log" -exec truncate -s 0 {} \; 2>/dev/null || true
    fi
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo ""
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë                    üéâ CLEANUP COMPLETE                      ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

if [ $DRY_RUN = false ]; then
    log_step "Docker system usage after cleanup:"
    get_docker_size
    echo ""
    
    log_success "Docker cleanup completed successfully!"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
    log_info "Disk space has been freed up"
    log_info "You can now restart your services with clean Docker environment"
else
    log_info "Dry run completed - no actual changes were made"
fi

echo ""
echo -e "${BLUE}üõ†Ô∏è  Next Steps:${NC}"
echo "   ‚Ä¢ Restart services:   ./start.sh"
echo "   ‚Ä¢ Check disk usage:   df -h"
echo "   ‚Ä¢ Monitor Docker:     docker system df"
echo ""

# –ü–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if [ $DRY_RUN = false ]; then
    echo -e "${BLUE}üìä Cleanup Summary:${NC}"
    echo "   ‚Ä¢ Containers cleaned: $([[ $CLEAN_CONTAINERS == true ]] && echo "‚úÖ" || echo "‚ùå")"
    echo "   ‚Ä¢ Images cleaned: $([[ $CLEAN_IMAGES == true ]] && echo "‚úÖ" || echo "‚ùå")"
    echo "   ‚Ä¢ Volumes cleaned: $([[ $CLEAN_VOLUMES == true ]] && echo "‚ö†Ô∏è  YES" || echo "‚ùå")"
    echo "   ‚Ä¢ Networks cleaned: $([[ $CLEAN_NETWORKS == true ]] && echo "‚úÖ" || echo "‚ùå")"
    echo "   ‚Ä¢ Build cache cleaned: $([[ $CLEAN_BUILD_CACHE == true ]] && echo "‚úÖ" || echo "‚ùå")"
    echo ""
fi

log_success "System is now clean and ready for fresh deployment!"
