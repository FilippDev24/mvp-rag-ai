#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RAG pipeline
–ó–∞–ø—É—Å–∫: python test_performance.py
"""

import os
import sys
import logging
import time
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('performance_test.log')
    ]
)

logger = logging.getLogger(__name__)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        logger.info("üöÄ Starting comprehensive performance testing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫
        from performance_profiler import (
            profile_service_initialization,
            profile_search_pipeline,
            profile_isolated_reranking
        )
        
        # 1. –≠–¢–ê–ü 1: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 1: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        logger.info("=" * 60)
        
        init_start_time = time.time()
        init_result = profile_service_initialization()
        init_total_time = (time.time() - init_start_time) * 1000
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {init_total_time:.1f}ms")
        
        services = init_result["services"]
        init_summary = init_result["profiler_summary"]
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("üêå –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        for i, op in enumerate(init_summary["slowest_operations"][:3], 1):
            logger.info(f"  {i}. {op['operation']}: {op['duration_ms']:.1f}ms")
        
        # 2. –≠–¢–ê–ü 2: –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        test_queries = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞?",
            "–ö–∞–∫–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—É",
            "Hello world test query",  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            "–ö—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å"  # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
        ]
        
        access_level = 50  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        
        # 3. –≠–¢–ê–ü 3: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 2: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ search pipeline")
        logger.info("=" * 60)
        
        pipeline_results = []
        
        for i, query in enumerate(test_queries, 1):
            logger.info(f"üìù –¢–µ—Å—Ç {i}/{len(test_queries)}: '{query[:50]}...'")
            
            pipeline_start_time = time.time()
            pipeline_result = profile_search_pipeline(query, access_level, services)
            pipeline_total_time = (time.time() - pipeline_start_time) * 1000
            
            pipeline_results.append({
                "query": query,
                "total_time_ms": pipeline_total_time,
                "profiler_result": pipeline_result
            })
            
            if pipeline_result.get("pipeline_success"):
                logger.info(f"‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {pipeline_total_time:.1f}ms, "
                           f"–Ω–∞–π–¥–µ–Ω–æ {pipeline_result.get('results_count', 0)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                logger.error(f"‚ùå Pipeline failed: {pipeline_result.get('error', 'Unknown error')}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        # 4. –≠–¢–ê–ü 4: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ä–∞–Ω–∂–µ—Ä–∞
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 3: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ä–∞–Ω–∂–µ—Ä–∞")
        logger.info("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_documents = [
            "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
            "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–∞–π—Ç–æ–≤.",
            "–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ä–∞–±–æ—Ç–∞ —Å SEO.",
            "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –ø–∏—Å—å–º–∞ –∏ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.",
            "–í –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –≤—Ö–æ–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.",
            "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Å—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã, —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.",
            "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.",
            "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏ –∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        ]
        
        test_query = "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞?"
        
        reranking_start_time = time.time()
        reranking_result = profile_isolated_reranking(
            test_query, test_documents, services["reranking_service"]
        )
        reranking_total_time = (time.time() - reranking_start_time) * 1000
        
        if reranking_result.get("reranking_success"):
            logger.info(f"‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ä–∞–Ω–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {reranking_total_time:.1f}ms, "
                       f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {reranking_result.get('documents_count', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            logger.error(f"‚ùå Reranking failed: {reranking_result.get('error', 'Unknown error')}")
        
        # 5. –≠–¢–ê–ü 5: –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 4: –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_pipelines = [r for r in pipeline_results if r["profiler_result"].get("pipeline_success")]
        
        if successful_pipelines:
            avg_pipeline_time = sum(r["total_time_ms"] for r in successful_pipelines) / len(successful_pipelines)
            max_pipeline_time = max(r["total_time_ms"] for r in successful_pipelines)
            min_pipeline_time = min(r["total_time_ms"] for r in successful_pipelines)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ pipeline (—É—Å–ø–µ—à–Ω—ã—Ö: {len(successful_pipelines)}):")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_pipeline_time:.1f}ms")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_pipeline_time:.1f}ms")
            logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_pipeline_time:.1f}ms")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            all_operations = {}
            for result in successful_pipelines:
                profiler_result = result["profiler_result"]
                if "all_measurements" in profiler_result:
                    for measurement in profiler_result["all_measurements"]:
                        op_name = measurement["operation"]
                        if op_name not in all_operations:
                            all_operations[op_name] = []
                        all_operations[op_name].append(measurement["duration_ms"])
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            avg_operations = {}
            for op_name, times in all_operations.items():
                avg_operations[op_name] = sum(times) / len(times)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            sorted_operations = sorted(avg_operations.items(), key=lambda x: x[1], reverse=True)
            
            logger.info("üêå –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º:")
            for i, (op_name, avg_time) in enumerate(sorted_operations[:5], 1):
                logger.info(f"   {i}. {op_name}: {avg_time:.1f}ms")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        logger.info("=" * 60)
        logger.info("–°–†–ê–í–ù–ï–ù–ò–ï –° –ò–ó–í–ï–°–¢–ù–´–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò")
        logger.info("=" * 60)
        
        logger.info("üîç –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info("   Embedding: ~200ms ‚úÖ")
        logger.info("   ChromaDB vector search: ~150ms ‚úÖ")
        logger.info("   BM25 search: ~50ms ‚úÖ")
        logger.info("   RRF Fusion: ~1ms ‚úÖ")
        logger.info("   BGE Reranking: ~750ms ‚úÖ (–±—ã–ª–æ 18000ms)")
        logger.info("   –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢: ~24000ms ‚ùì")
        
        if reranking_result.get("reranking_success"):
            isolated_reranking_time = reranking_result["total_pipeline_time_ms"]
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ä–∞–Ω–∂–µ—Ä: {isolated_reranking_time:.1f}ms")
            
            if isolated_reranking_time > 1000:
                logger.warning(f"‚ö†Ô∏è  –†–µ—Ä–∞–Ω–∂–µ—Ä –≤—Å–µ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π: {isolated_reranking_time:.1f}ms > 1000ms")
            else:
                logger.info(f"‚úÖ –†–µ—Ä–∞–Ω–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {isolated_reranking_time:.1f}ms")
        
        if successful_pipelines:
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π –ø–æ–ª–Ω—ã–π pipeline: {avg_pipeline_time:.1f}ms")
            
            if avg_pipeline_time > 5000:  # 5 —Å–µ–∫—É–Ω–¥
                logger.error(f"‚ùå Pipeline –≤—Å–µ –µ—â–µ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π: {avg_pipeline_time:.1f}ms")
                logger.info("üîç –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ ~24 —Å–µ–∫—É–Ω–¥—ã")
            elif avg_pipeline_time > 2000:  # 2 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è  Pipeline –º–µ–¥–ª–µ–Ω–Ω—ã–π: {avg_pipeline_time:.1f}ms")
            else:
                logger.info(f"‚úÖ Pipeline –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {avg_pipeline_time:.1f}ms")
        
        logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logger.info("üìÅ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
        raise e


if __name__ == "__main__":
    main()
